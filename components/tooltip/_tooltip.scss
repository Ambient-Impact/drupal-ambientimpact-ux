// -----------------------------------------------------------------------------
//   Ambient.Impact - UX - Tooltip component partial
// -----------------------------------------------------------------------------

@use 'material.common/material.panel' as material-panel;
@use 'material.common/material.shadow' as material-shadow;

///
/// The padding of tooltips.
///
$tooltip-padding: 0.4em 0.8em !default;

///
/// The tooltip shadow depth to pass to the material-panel mixin.
///
$tooltip-shadow-depth: 2 !default;

///
/// The tooltip max width.
///
$tooltip-max-width: 25em !default;

///
/// Tooltip Material dark and light themes.
///
$tooltip-themes: (
  material-dark:  (
    background-colour:  material-panel.$background-colour-dark,
  ),
  material-light: (
    background-colour:  material-panel.$background-colour-light,
  ),
);

///
/// Generate a tooltip Material theme.
///
/// @param {String} $theme-name
///   The name of the theme to generate styles for. This is used to create the
///   class.
///
/// @param {Color} $background-colour
///   The background colour for this theme.
///
/// @require {Mixin} material-panel
/// @require {Variable} $tooltip-padding
/// @require {Variable} $tooltip-shadow-depth
///
@mixin tooltip-material-theme($theme-name, $background-colour) {
  @each $placement in 'top', 'bottom', 'left', 'right' {
    .tippy-popper[x-placement^='#{$placement}'].tippy-tooltip.#{
      $theme-name
    }-theme .tippy-arrow {
      // Tippy uses the corresponding side's border to create the arrow, so all
      // we have to do to recolour the arrow is to set the border colour.
      border-#{$placement}-color: $background-colour;
    }
  }

  .tippy-tooltip.#{$theme-name}-theme {
    @include material-panel.panel(
      $padding-small:     $tooltip-padding,
      $padding-large:     $tooltip-padding,
      $background-colour: $background-colour,
      $shadow-depth:      $tooltip-shadow-depth
    );

    // Remove the box-shadow added by the panel mixin so that we can use the CSS
    // filter-based drop-shadow() which allows us to apply the shadow to the
    // arrow as well without having to mess with trying to clip it to prevent
    // the arrow shadow overlapping the panel.
    box-shadow: none;

    filter:
      drop-shadow(material-shadow.filter-downward($tooltip-shadow-depth))
      drop-shadow(material-shadow.filter-ambient($tooltip-shadow-depth));

    .tippy-backdrop {
      background-color:   $background-colour;
    }

    .tippy-roundarrow {
      svg {
        fill: $background-colour;
      }
    }

    &[data-animatefill] {
      background-color:   transparent;
    }
  }
}
